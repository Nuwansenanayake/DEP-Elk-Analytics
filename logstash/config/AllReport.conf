input {
    beats {
      host => "localhost"
      port => 5044
    }	

}

filter {
    if [source] =~ "request-response-logger" {
        mutate { replace => { "type" => "request-response" } }

        if [message] =~ "TRANSACTION:request" {
            grok {
                match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}]  %{LOGLEVEL:level} \{%{DATA:logtype}} -  TRANSACTION:%{WORD:transaction},API_REQUEST_ID:%{GREEDYDATA:tid},APPLICATION_ID:%{NUMBER:application},API_NAME:%{WORD:api},API_PUBLISHER:%{WORD:publisher},API_VERSION:%{WORD:api_v},API_CONTEXT:%{GREEDYDATA:context},USER_ID:%{GREEDYDATA:user},jwzToken:%{GREEDYDATA:jwztoken},body:%{GREEDYDATA:body}" }
            }
            aggregate { #store required data in a map
                task_id => "%{tid}"
                code => "
                    map['reqBody'] = event.get('body')
                    map['user'] = event.get('user')                    
                    map['application'] = event.get('application')
                    map['api'] = event.get('api')
                    map['timestamp'] = event.get('timestamp')
                "
                map_action => "create"
            }
            drop {}#drop the request before persisting, to save indexing space in elasticsearch server
        }
        if [message] =~ "TRANSACTION:response" {
            grok {
                match => { "message" => "\[%{TIMESTAMP_ISO8601:response-time}]  %{LOGLEVEL:level} \{%{DATA:logtype}} -  TRANSACTION:%{WORD:transaction},API_REQUEST_ID:%{GREEDYDATA:tid},body:%{GREEDYDATA:response}" }
                remove_field => ["message"]  
            }

            aggregate {                
                task_id => "%{tid}"

                code => "
                    event.set('request', map['reqBody'])
                    event.set('user', map['user'])    
                    event.set('application', map['application'])
                    event.set('api', map['api'])
                    event.set('request-time', map['timestamp'])
                    event.set('transaction', 'full')     
                                    
                "
                map_action => "update"
                end_of_task => true
                push_map_as_event_on_timeout => true
                timeout => 120
                timeout_task_id_field => "tid"
                timeout_code => "
                    event.set('response','Response-timeout')
                    event.set('type','request-response')
                    event.set('transaction', 'request')
                "
            }

            ruby {
                init => "require 'time'"
                code => "duration = (DateTime.parse(event.get('response-time')).to_time.to_f*1000 - DateTime.parse(event.get('request-time')).to_time.to_f*1000) rescue nil; event.set('service-time', duration); "
            }
        }
    }
}

output {
    if [type] == "request-response" and [tid] != "null" {
        elasticsearch {
            hosts => [ "localhost:9200" ]
            index => "transactions-%{+YYYY.MM.dd}"
        }
        csv {
            path => "csv_reports/%{+YYYY}-%{+MM}-%{+dd}/transactions.csv"
            fields => ["request-time","response-time","tid","user","application","api","transaction","service-time","response","request"]
        }
        csv {
            path => "csv_reports/%{+YYYY}-%{+MM}-%{+dd}/transactionWithoutBody.csv"
            fields => ["request-time","response-time","tid","user","application","api","transaction","service-time"]
        }
        csv {
            path => "csv_reports/%{+YYYY}-%{+MM}-%{+dd}/response.csv"
            fields => ["tid","response"]
        }
        csv {
            path => "csv_reports/%{+YYYY}-%{+MM}-%{+dd}/request.csv"
            fields => ["tid","request"]
        }


    }
}
